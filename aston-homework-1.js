
// Задание 1: Подробно прочитать про метод запроса OPTIONS - и кратко его описать, когда вызывается, где используется, что передает и принимает.
// Метод запроса OPTIONS используется для получения информации о возможностях сервера и параметрах конкретного ресурса или о доступных методах взаимодействия с ресурсом. Вот подробное описание и характеристики метода OPTIONS:
// Когда вызывается: Метод OPTIONS вызывается клиентом для запроса информации о возможностях сервера и параметрах конкретного ресурса перед отправкой запроса другого метода (например, GET, POST, PUT).
// Где используется: Метод OPTIONS широко используется в среде веб-разработки, особенно в контексте работы с веб-серверами и API. Он позволяет клиенту получить информацию о доступных методах запроса, поддерживаемых заголовках и других параметрах, что полезно при разработке и отладке веб-приложений.
// Что передает: Метод OPTIONS передает запрос на сервер, содержащий информацию о ресурсе, для которого запрашивается информация, а также любые дополнительные параметры, необходимые для выполнения запроса.
// Что принимает: Сервер обрабатывает запрос OPTIONS и возвращает ответ, содержащий информацию о поддерживаемых методах запроса, допустимых заголовках, разрешенных методах доступа и других характеристиках ресурса.
// Использование в CORS: Метод OPTIONS также используется в предзапросах Cross-Origin Resource Sharing (CORS), где клиент отправляет запрос OPTIONS, чтобы узнать, разрешены ли запросы из другого источника к данному ресурсу.
// Роль в безопасности: Метод OPTIONS является одним из методов, используемых для проверки возможностей сервера до отправки запросов, что помогает в предотвращении возможных проблем безопасности и ошибок в процессе взаимодействия с сервером.
// Кратко говоря, метод OPTIONS предоставляет клиенту информацию о возможностях сервера и параметрах конкретного ресурса, что делает его полезным инструментом при разработке веб-приложений и API.


// Задание 2: Прочитать и описать ключевые особенности "HTTP" Версии 3.0
// HTTP/3 - это новая версия протокола HTTP, которая была разработана с учетом текущих требований веб-разработки и изменений в сетевых технологиях. Вот несколько ключевых особенностей HTTP/3:
// а) Использование протокола QUIC: HTTP/3 базируется на протоколе QUIC (Quick UDP Internet Connections), который является протоколом транспортного уровня, работающим поверх UDP. Это позволяет снизить задержки и улучшить производительность за счет устранения недостатков TCP, таких как медленный старт и блокирование.
// б) Мультиплексирование потоков: HTTP/3 поддерживает мультиплексирование потоков, что позволяет одновременно передавать несколько запросов и ответов по одному соединению. Это снижает задержки и улучшает производительность, особенно на медленных сетях.
// в) Улучшенная обработка потерь пакетов: QUIC в HTTP/3 включает в себя механизмы для эффективной обработки потерь пакетов, что уменьшает влияние потерь на скорость передачи данных и повторную передачу.
// г) Динамическое обновление и улучшенная безопасность: HTTP/3 поддерживает динамическое обновление и расширение протокола без необходимости обновления клиентских или серверных приложений. Также он включает в себя механизмы для повышения безопасности, такие как обязательное шифрование соединения.
// д) Эффективное управление соединениями: HTTP/3 предоставляет механизмы для эффективного управления соединениями, включая улучшенное управление потоками и более гибкие опции конфигурации.
// е) Совместимость с HTTP/2 и HTTP/1.1: HTTP/3 разработан с учетом обратной совместимости с предыдущими версиями протокола HTTP, что обеспечивает плавный переход и совместимость с существующими приложениями и инфраструктурой.
// Задание 3:Прочитать про способы отмены запроса, включая объект "AbortController"
// 1.Использование объекта AbortController:
// а) Создание нового экземпляра AbortController.
// б) Получение сигнала (signal) от контроллера.
// В) Передача сигнала в параметры запроса (fetch, XMLHttpRequest и т. д.).
// г) Вызов метода abort() контроллера для отмены запроса.
// 2. Использование timeout: установка таймера (setTimeout) для отмены запроса через определенное время после его отправки.
// 3.Использование флага для контроля:
// а) Создание флага, который будет сигнализировать о необходимости отмены запроса.
// б) В коде обработки результата запроса проверка значения этого флага и прерывание выполнения запроса при необходимости.
// 4. Использование сторонних библиотек: некоторые библиотеки AJAX предоставляют собственные методы для отмены запросов, такие как axios.CancelToken.
// 5. Использование специфичных для среды функций: например, для отмены запроса в React-приложениях можно использовать useEffect и AbortController или axios.CancelToken
// Задание 3: Написать по 2 примера создания примитивных значений (если есть несколько способов - использовать) (string, number, boolean, null, undefined, symbol, bigInt)
const string="Привет мир"
const string1=new String("Привет мир")
const number=45
const number1=new Number(45)
const boolean=true
const boolean1=new Boolean(true)
const boolean2=!!1
const nullValue = null;
let undefinedValue
const undefinedValue1=undefined
const sym2 = Symbol("description");
const bigInt=123456789012345678901234567890n
const bigInt1=new BigInt("123456789012345678901234567890")


// Задание 4: Почему, если обратиться к переменным созданным через let, const до их объявления - мы получаем ReferenceError?
// Попытавшись обратиться к let или const-переменной до ее объявления, мы получаем ошибку, и происходит это из-за временной мертвой зоны (temporal dead zone, TDZ). TDZ начинается в начале области видимости переменной и заканчивается ее объявлением. Обращение к переменной в TDZ приводит к выбросу ReferenceError.
// Задание 5:
const res = "B" + "a" + (1 - "hello");
console.log(res)
// Ответ : BaNaN
const res2 = (true && 3) + "d";
console.log(res2); 
// Ответ : 3d
const res3 = Boolean(true && 3) + "d";
console.log(res3);
// Ответ : trued